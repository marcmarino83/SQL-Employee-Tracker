const inquirer = require('inquirer');

const viewDepartments = (client, callback) => {
    client.query('SELECT * FROM department', (err, res) => {
        if (err) throw err;
        console.table(res.rows);
        callback();
    });
};

const viewRoles = (client, callback) => {
    client.query(`
        SELECT role.id, role.title, role.salary, department.name AS department 
        FROM role 
        JOIN department ON role.department_id = department.id
    `, (err, res) => {
        if (err) throw err;
        console.table(res.rows);
        callback();
    });
};

const viewEmployees = (client, callback) => {
    client.query(`
        SELECT employee.id, employee.first_name, employee.last_name, role.title, department.name AS department, role.salary, manager.first_name AS manager_first, manager.last_name AS manager_last
        FROM employee
        JOIN role ON employee.role_id = role.id
        JOIN department ON role.department_id = department.id
        LEFT JOIN employee AS manager ON employee.manager_id = manager.id
    `, (err, res) => {
        if (err) throw err;
        console.table(res.rows);
        callback();
    });
};

const addDepartment = (client, callback) => {
    inquirer.prompt([
        {
            type: 'input',
            name: 'name',
            message: 'Enter department name:'
        }
    ]).then((answers) => {
        client.query('INSERT INTO department (name) VALUES ($1)', [answers.name], (err, res) => {
            if (err) throw err;
            console.log('Department added!');
            callback();
        });
    });
};

const addRole = (client, callback) => {
    client.query('SELECT * FROM department', (err, res) => {
        if (err) throw err;
        const departments = res.rows.map(department => ({ name: department.name, value: department.id }));
        inquirer.prompt([
            {
                type: 'input',
                name: 'title',
                message: 'Enter role title:'
            },
            {
                type: 'input',
                name: 'salary',
                message: 'Enter role salary:'
            },
            {
                type: 'list',
                name: 'department_id',
                message: 'Select department:',
                choices: departments
            }
        ]).then((answers) => {
            client.query('INSERT INTO role (title, salary, department_id) VALUES ($1, $2, $3)', [answers.title, answers.salary, answers.department_id], (err, res) => {
                if (err) throw err;
                console.log('Role added!');
                callback();
            });
        });
    });
};

const addEmployee = (client, callback) => {
    client.query('SELECT * FROM role', (err, res) => {
        if (err) throw err;
        const roles = res.rows.map(role => ({ name: role.title, value: role.id }));
        client.query('SELECT * FROM employee', (err, res) => {
            if (err) throw err;
            const managers = res.rows.map(manager => ({ name: `${manager.first_name} ${manager.last_name}`, value: manager.id }));
            managers.push({ name: 'None', value: null });
            inquirer.prompt([
                {
                    type: 'input',
                    name: 'first_name',
                    message: 'Enter employee first name:'
                },
                {
                    type: 'input',
                    name: 'last_name',
                    message: 'Enter employee last name:'
                },
                {
                    type: 'list',
                    name: 'role_id',
                    message: 'Select role:',
                    choices: roles
                },
                {
                    type: 'list',
                    name: 'manager_id',
                    message: 'Select manager:',
                    choices: managers
                }
            ]).then((answers) => {
                client.query('INSERT INTO employee (first_name, last_name, role_id, manager_id) VALUES ($1, $2, $3, $4)', [answers.first_name, answers.last_name, answers.role_id, answers.manager_id], (err, res) => {
                    if (err) throw err;
                    console.log('Employee added!');
                    callback();
                });
            });
        });
    });
};

const updateEmployeeRole = (client, callback) => {
    client.query('SELECT * FROM employee', (err, res) => {
        if (err) throw err;
        const employees = res.rows.map(employee => ({ name: `${employee.first_name} ${employee.last_name}`, value: employee.id }));
        client.query('SELECT * FROM role', (err, res) => {
            if (err) throw err;
            const roles = res.rows.map(role => ({ name: role.title, value: role.id }));
            inquirer.prompt([
                {
                    type: 'list',
                    name: 'employee_id',
                    message: 'Select employee:',
                    choices: employees
                },
                {
                    type: 'list',
                    name: 'role_id',
                    message: 'Select new role:',
                    choices: roles
                }
            ]).then((answers) => {
                client.query('UPDATE employee SET role_id = $1 WHERE id = $2', [answers.role_id, answers.employee_id], (err, res) => {
                    if (err) throw err;
                    console.log('Employee role updated!');
                    callback();
                });
            });
        });
    });
};

module.exports = { viewDepartments, viewRoles, viewEmployees, addDepartment, addRole, addEmployee, updateEmployeeRole };